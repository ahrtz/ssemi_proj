df1 <- read_xlsx(path = "C:/Users/student/Desktop/ssemi_proj/서울시_분류별_관광명소_좌표_(1).xlsx")
df1 <- read_xlsx(path = "C:/Users/student/Desktop/ssemi_proj/Jsp/서울시_분류별_관광명소_좌표_(1).xlsx")
library(readxl)
df1 <- read_xlsx(path = "C:/Users/student/Desktop/ssemi_proj/Jsp/서울시_분류별_관광명소_좌표_(1).xlsx")
df1
4. 지도창이 팝업되도록... 플라스크...?
df[1,3]
4. 지도창이 팝업되도록... 플라스크...?
df1[1,3]
df1 <- as.data.frame(df1)
4. 지도창이 팝업되도록... 플라스크...?
df1[1,3]
4. 지도창이 팝업되도록... 플라스크...?
df1[1,3:4]
df_origin <- df1[1,3]
df_origin
df_origin <- df1[1,4]
df_origin
cbind(df_origin,df1[1,3])
a <- cbind(df_origin,df1[1,3])
a
a <- cbind(df1[1,4],df1[1,3])
a
a <- cbind(df1[,4],df1[,3])
a
a <- cbind(df1[,4],df1[,3])
a
df_origin <- cbind(df1[1,4],df1[1,3])
a[1]
a[1,2]
head(a)
df_origin-a
df_origin[,1]-a
ex1 <- df_origin[,1]-a
ex1
ex1[1]
ex1[1:,]
ex1[,1]
ex1-ex1[,1]
ex1 <- df_origin[1,]-a
ex1 <- df_origin[,1]-a
ex1[,1]
ex2 <- df_origin[1,]-a
ex2
head(a)
ex1 <- a-df_origin
exx <- a-df_origin[1]
exx
a[1]
a[1:]
a[1:,]
a[1:2,]
a[.1]
4. 지도창이 팝업되도록... 플라스크...?
df1[1,3:4]
head(a)
names(a)
names(a) <- c("Longitude","Latitude")
a
head(a)
a <- cbind(df1[,4],df1[,3])
head(a)
names(a) <- c("Longitude","Latitude")
a
a <- cbind(df1[,4],df1[,3])
df1 <- read_xlsx(path = "C:/Users/student/Desktop/ssemi_proj/Jsp/서울시_분류별_관광명소_좌표_(1).xlsx")
df1 <- as.data.frame(df1)
df1[,3:4]
df_origin <- cbind(df1[1,4],df1[1,3])
a <- cbind(df1[,4],df1[,3])
colnames(a) <- c("Longitude","Latitude")
a
head(a)
a["Longitude"]
a[,"Longitude"]
df_origin
colnames(df_origin) <- c("Longitude","Latitude")
df_origin
df_origin-a
a[,"Longitude"]-df_origin[,"Longitude"]
lat_diff <- a["Latitude",]-df_origin["Latitude",]
a["Latitude",]
a
head(a)
a[,"Longitude"]
head(a[,"Longitude"])
head(a)
head(a[,"Longitude"])
a["Latitude"]
a[,"Latitude"]
long_diff <- a[,"Longitude"]-df_origin[,"Longitude"]
lat_diff <- a[,"Latitude"]-df_origin[,"Latitude"]
2**2
3**2
dis_diff <- sqrt(long_diff**2+lat_diff**2)
dis_diff
View(dis_diff)
experiment <- cbind(df1,dis_diff)
experimet
experiment
head(experiment)
write.csv(experiment,file = "실험.csv")
write.csv(experiment,file = "실험.csv",col.names = F)
write.csv(experiment,file = "실험.csv",colnames = F)
write.csv(experiment,file = "실험.csv",col.names = F)
write.csv(experiment,file = "실험.csv",col.names = FALSE)
write.csv(experiment,file = "실험.csv")
df1 <- read_xlsx(path = "C:/Users/student/Desktop/ssemi_proj/Jsp/서울시_분류별_관광명소_좌표.xlsx")
df1 <- as.data.frame(df1)
df1[,3:4]
#내일 해야 하는일
#1. 위도 경도 차이를 나눌 시간 변수를 구해야 한다.
#2. + - 하는 코드를 짜야댄다.
#3. 출력을 먼 순서로 해야 대는데 1번을 고려해서 정해야한다.
#4. 지도창이 팝업되도록... 플라스크...?
df1
#내일 해야 하는일
#1. 위도 경도 차이를 나눌 시간 변수를 구해야 한다.
#2. + - 하는 코드를 짜야댄다.
#3. 출력을 먼 순서로 해야 대는데 1번을 고려해서 정해야한다.
#4. 지도창이 팝업되도록... 플라스크...?
head(df1)
df1[1,4:5]
#내일 해야 하는일
#1. 위도 경도 차이를 나눌 시간 변수를 구해야 한다.
#2. + - 하는 코드를 짜야댄다.
#3. 출력을 먼 순서로 해야 대는데 1번을 고려해서 정해야한다.
#4. 지도창이 팝업되도록... 플라스크...?
head(df1)
df1 <- df1[1,4:5]
#내일 해야 하는일
#1. 위도 경도 차이를 나눌 시간 변수를 구해야 한다.
#2. + - 하는 코드를 짜야댄다.
#3. 출력을 먼 순서로 해야 대는데 1번을 고려해서 정해야한다.
#4. 지도창이 팝업되도록... 플라스크...?
head(df1)
df1 <- df1[1,4:5]
df_origin <- cbind(df1[1,5],df1[1,4])
df1 <- read_xlsx(path = "C:/Users/student/Desktop/ssemi_proj/Jsp/서울시_분류별_관광명소_좌표.xlsx")
df1 <- as.data.frame(df1)
df1[,4:5]
#내일 해야 하는일
#1. 위도 경도 차이를 나눌 시간 변수를 구해야 한다.
#2. + - 하는 코드를 짜야댄다.
#3. 출력을 먼 순서로 해야 대는데 1번을 고려해서 정해야한다.
#4. 지도창이 팝업되도록... 플라스크...?
head(df1)
df1 <- df1[1,4:5]
#내일 해야 하는일
#1. 위도 경도 차이를 나눌 시간 변수를 구해야 한다.
#2. + - 하는 코드를 짜야댄다.
#3. 출력을 먼 순서로 해야 대는데 1번을 고려해서 정해야한다.
#4. 지도창이 팝업되도록... 플라스크...?
head(df1)
#내일 해야 하는일
#1. 위도 경도 차이를 나눌 시간 변수를 구해야 한다.
#2. + - 하는 코드를 짜야댄다.
#3. 출력을 먼 순서로 해야 대는데 1번을 고려해서 정해야한다.
#4. 지도창이 팝업되도록... 플라스크...?
head(df1)
df1 <- df1[,4:5]
#내일 해야 하는일
#1. 위도 경도 차이를 나눌 시간 변수를 구해야 한다.
#2. + - 하는 코드를 짜야댄다.
#3. 출력을 먼 순서로 해야 대는데 1번을 고려해서 정해야한다.
#4. 지도창이 팝업되도록... 플라스크...?
head(df1)
df1 <- read_xlsx(path = "C:/Users/student/Desktop/ssemi_proj/Jsp/서울시_분류별_관광명소_좌표.xlsx")
df1 <- as.data.frame(df1)
df1 <- df1[,4:5]
#내일 해야 하는일
#1. 위도 경도 차이를 나눌 시간 변수를 구해야 한다.
#2. + - 하는 코드를 짜야댄다.
#3. 출력을 먼 순서로 해야 대는데 1번을 고려해서 정해야한다.
#4. 지도창이 팝업되도록... 플라스크...?
head(df1)
df_origin <- cbind(df1[1,5],df1[1,4])
a <- cbind(df1[,5],df1[,4])
head(a)
df_origin
df_origin <- cbind(df1[1,5],df1[1,4])
df_origin
#내일 해야 하는일
#1. 위도 경도 차이를 나눌 시간 변수를 구해야 한다.
#2. + - 하는 코드를 짜야댄다.
#3. 출력을 먼 순서로 해야 대는데 1번을 고려해서 정해야한다.
#4. 지도창이 팝업되도록... 플라스크...?
head(df1)
df1 <- read_xlsx(path = "C:/Users/student/Desktop/ssemi_proj/Jsp/서울시_분류별_관광명소_좌표.xlsx")
df1 <- as.data.frame(df1)
#내일 해야 하는일
#1. 위도 경도 차이를 나눌 시간 변수를 구해야 한다.
#2. + - 하는 코드를 짜야댄다.
#3. 출력을 먼 순서로 해야 대는데 1번을 고려해서 정해야한다.
#4. 지도창이 팝업되도록... 플라스크...?
head(df1)
df_origin <- cbind(df1[1,5],df1[1,4])
a <- cbind(df1[,5],df1[,4])
#내일 해야 하는일
#1. 위도 경도 차이를 나눌 시간 변수를 구해야 한다.
#2. + - 하는 코드를 짜야댄다.
#3. 출력을 먼 순서로 해야 대는데 1번을 고려해서 정해야한다.
#4. 지도창이 팝업되도록... 플라스크...?
head(df1)
df_origin
head(df_origin)
head(a)
colnames(df_origin) <- c("Longitude","Latitude")
colnames(a) <- c("Longitude","Latitude")
head(a)
long_diff <- a[,"Longitude"]-df_origin[,"Longitude"]
lat_diff <- a[,"Latitude"]-df_origin[,"Latitude"]
dis_diff <- sqrt(long_diff**2+lat_diff**2)
View(dis_diff)
experiment <- cbind(df1,dis_diff)
head(experiment)
View(experiment)
write.csv(experiment,file = "실험1.csv")
#https://map.kakao.com/link/to/카카오판교오피스,37.402056,127.108212
departure <- "순라길"
arrive <- "예지원"
url1 <- str_c("https://map.kakao.com/?sName=",departure,"&eName=",arrive,"&target=bike")
url1
library(stringr)
#https://map.kakao.com/link/to/카카오판교오피스,37.402056,127.108212
departure <- "순라길"
arrive <- "예지원"
url1 <- str_c("https://map.kakao.com/?sName=",departure,"&eName=",arrive,"&target=bike")
url1
arrive <- "예지원 장충동"
url1 <- str_c("https://map.kakao.com/?sName=",departure,"&eName=",arrive,"&target=bike")
url1
arrive <- "정독도서관관"
arrive <- "정독도서관"
url1 <- str_c("https://map.kakao.com/?sName=",departure,"&eName=",arrive,"&target=bike")
url1
arrive <- "서울시민 광나루안전체험관"
url1 <- str_c("https://map.kakao.com/?sName=",departure,"&eName=",arrive,"&target=bike")
url1
df_exp <- read.csv(file ="C:/Users/student/Desktop/ssemi_proj/Jsp/실험1.csv")
View(df_exp)
df_exp <- read.csv(file ="C:/Users/student/Desktop/ssemi_proj/Jsp/실험1.csv",row.names=F)
View(df_exp)
df_exp[2:,]
df_exp[2:]
df_exp[2:
dfsa
abline()
View(df_exp)
df_exp[1]
df_exp <- read.csv(file ="C:/Users/student/Desktop/ssemi_proj/Jsp/실험1.csv")
View(df_exp)
library(dplyr)
#최단 시간 구하기
head(df_exp$dis_diff)
plot(x=df_exp$dis_diff, y=df_exp$거리.km.)
df_exp <- read.csv(file ="C:/Users/student/Desktop/ssemi_proj/Jsp/실험1.csv")
View(df_exp)
plot(x=df_exp$dis_diff, y=df_exp$distance)
res=lm(df_exp$distance~df_exp$dis_diff)
abline(res)
df_exp <- read.csv(file ="C:/Users/student/Desktop/ssemi_proj/Jsp/실험1.csv")
plot(x=df_exp$dis_diff, y=df_exp$distance)
df_exp <- read.csv(file ="C:/Users/student/Desktop/ssemi_proj/Jsp/실험1.csv")
View(df_exp)
#최단 시간 구하기
head(df_exp$dis_diff)
df
plot(x=df_exp$dis_diff, y=df_exp$distance)
res=lm(df_exp$distance~df_exp$dis_diff)
abline(res)
df_exp <- read.csv(file ="C:/Users/student/Desktop/ssemi_proj/Jsp/실험1.csv")
View(df_exp)
plot(x=df_exp$dis_diff, y=df_exp$distance)
res=lm(df_exp$distance~df_exp$dis_diff)
abline(res)
res
summary(res)
res_anova <- anova(res)
res_anova
confident.default(res)
plot(x=df_exp$dis_diff, y=df_exp$Time)
res=lm(df_exp$Time~df_exp$dis_diff)
abline(res)
summary(res)
res_anova <- anova(res)
res_anova
#https://map.kakao.com/link/to/카카오판교오피스,37.402056,127.108212
departure <- "순라길"
arrive <- "서울시민 광나루안전체험관"
url1 <- str_c("https://map.kakao.com/?sName=",departure,"&eName=",arrive,"&target=bike")
url1
plot(x=df_exp$dis_diff, y=df_exp$distance)
plot(x=df_exp$dis_diff, y=df_exp$distance)
res_dis=lm(df_exp$distance~df_exp$dis_diff)
abline(res_dis)
summary(res_dis)
summary(res_dis)
res_dis_anova <- anova(res_dis)
res_dis_anova
plot(x=df_exp$dis_diff, y=df_exp$Time)
res_Time=lm(df_exp$Time~df_exp$dis_diff)
abline(res_Time)
summary(res_Time)
res_Time_anova <- anova(res_Time)
res_Time_anova
abline(res_dis)
plot(x=df_exp$dis_diff, y=df_exp$distance)
res_dis=lm(df_exp$distance~df_exp$dis_diff)
abline(res_dis)
summary(res_dis)
res_dis
res_Time
plot(x=df_exp$dis_diff, y=df_exp$Time)
plot(x=df_exp$Time, y=df_exp$dis_diff)
res_Time=lm(df_exp$dis_diff~df_exp$Time)
abline(res_Time)
summary(res_Time)
res_Time
head(a)
df_exp %>% filter(df_exp,Latitude<=dep_lat+map_diff) %>% filter(df_exp,Latitude>=dep_lat+map_diff)
time_input <- 30 # 예시
# 위도로 변환하기
long_lati_diff = (0.001365 * time_input) + 0.002378
map_diff = long_lati_diff/sqrt(2)
dep_lat <- 37.472 #위도
dep_long <- 127.051338
df_exp %>% filter(df_exp,Latitude<=dep_lat+map_diff) %>% filter(df_exp,Latitude>=dep_lat+map_diff)
df_exp %>% filter(df_exp,Latitude<=dep_lat+map_diff)
#최단 시간 구하기
head(df_exp)
df_exp %>% filter(df_exp,Latitude<=dep_lat+map_diff)%>% summarise(name="상호명")
type(df_exp$Latitude)
class(df_exp$Latitude)
df_exp$Latitude>=dep_lat+map_diff
trial1=df_exp$Latitude>=dep_lat+map_diff
trial2=df_exp$Latitude<=dep_lat+map_diff
trial1*trial2
table(trial1*trial2)
table(trial1=df_exp$Latitude>=dep_lat+map_diff)
table(trial2=df_exp$Latitude<=dep_lat+map_diff)
table(trial1=df_exp$Latitude>=dep_lat-map_diff)
table(trial2=df_exp$Latitude<=dep_lat+map_diff)
trial1 *trial2
table(trial1 *trial2)
table(trial1+trial2)
head(df_exp[trial1])
tria1
tria11
trial1
head(df_exp[trial1])
df_exp  <- as.data.frame(df_exp)
table(trial1=df_exp$Latitude>=dep_lat-map_diff)
table(trial2=df_exp$Latitude<=dep_lat+map_diff)
head(df_exp[trial1])
trial1=df_exp$Latitude>=dep_lat-map_diff
trial2=df_exp$Latitude<=dep_lat+map_diff
head(df_exp[trial1])
df_exp[trial1]
length(trial1)
length(df_exp)
nrow(df_exp)
# 위도로 변환하기
long_lati_diff = (0.001365 * time_input) + 0.002378
map_diff = long_lati_diff/sqrt(2)
%>% filter(Longtitude>=dep_long-map_diff & Longtitude<=dep_long-map_diff) %>% select(상호명)
%>% select(상호명)
df_exp %>% filter(Latitude>=dep_lat-map_diff &Latitude<=dep_lat+map_diff)%>% select(상호명)
df_exp %>% filter(Latitude>=dep_lat-map_diff &Latitude<=dep_lat+map_diff)%>% filter(Longtitude>=dep_long-map_diff & Longtitude<=dep_long-map_diff)%>% select(상호명)
df_exp %>% filter(Latitude>=dep_lat-map_diff &Latitude<=dep_lat+map_diff)%>% filter(Longitude>=dep_long-map_diff & Longitude<=dep_long-map_diff)%>% select(상호명)
df_exp %>% filter(Latitude>=dep_lat-map_diff &Latitude<=dep_lat+map_diff)%>% filter(Longitude>=dep_long-map_diff & Longitude<=dep_long-map_diff)%>% select(상호명)
df_exp %>% filter(Longitude>=dep_long-map_diff & Longitude<=dep_long-map_diff)%>% select(상호명)
trial3 = df_exp$Longitude>=dep_long -map_diff
table(trial3)
df_exp %>% filter(Latitude>=dep_lat-map_diff &Latitude<=dep_lat+map_diff)%>% filter(Longitude>=dep_long-map_diff & Longitude<=dep_long+map_diff)%>% select(상호명)
df_exp %>% filter(Latitude>=dep_lat-map_diff &Latitude<=dep_lat+map_diff)%>% filter(Longitude>=dep_long-map_diff & Longitude<=dep_long+map_diff)%>% select(상호명,Longitude,Latitude)
result <- df_exp %>% filter(Latitude>=dep_lat-map_diff &Latitude<=dep_lat+map_diff)%>% filter(Longitude>=dep_long-map_diff & Longitude<=dep_long+map_diff)%>% select(상호명,Longitude,Latitude)
result[,2]
result[,Longitude]
result[,"Longitude"]
result[,"Longitude"]-dep_lat
result[,"Longitude"]-dep_long
(result[,"Longitude"]-dep_long)**2+(result[,"Latitude"]-dep_lat)**2
(((result[,"Longitude"]-dep_long)**2+(result[,"Latitude"]-dep_lat)**2)-0.002378)/0.001365
(sqrt((result[,"Longitude"]-dep_long)**2+(result[,"Latitude"]-dep_lat)**2)-0.002378)/0.001365
time_diff <-  (sqrt((result[,"Longitude"]-dep_long)**2+(result[,"Latitude"]-dep_lat)**2)-0.002378)/0.001365
time_diff
View(time_diff)
cbind(result,time_diff)
final_result <- cbind(result,time_diff)
final_result
max(final_result$time_diff,3)
max(final_result$time_diff,1:3)
max(final_result$time_diff,c(1,2,3))
library(dplyr)
library(ggmap)
final_result
final_result %>% arrange(desc(time_diff))
# 구글 api 키를 이용해서 인증을 받는다
register_google(key=apikey)
library(ggmap)
# 여기 들어가서 https://cloud.google.com/maps-platform/terms 동의하고 키 생성하세요
# 생성한 구글 API KEy
apikey =
"AIzaSyD_F7t0a0ncNi9ym9ATXzEnyQBP3SkiKQs"
# 구글 api 키를 이용해서 인증을 받는다
register_google(key=apikey)
gg_seoul <- get_googlemap("garakdong",maptype = "roadmap")
ggmap(gg_seoul)
geo_code=geocode(enc2utf8("오금역")) # 인코딩하는 함수임
geo_code
# google map 을 그리려면 위도 경도가 숫자형태의 벡터로 되어있어야한다
geo_data <-  as.numeric(geo_code)
geo_data
ggmap(get_googlemap(geo_data,maptype = "roadmap"))
get_googlemap(center = geo_data,maptype = "roadmap",zoom = 18) %>% ggmap() + geom_point(data=geo_code,aes(x=lon,y=lat),size = 8 ,color = "red")
library(plotly)
# interactive map <-  지금 지도 같은거 생각하면댐
# 패키지를 설치해서 할 수 있다.
install.packages("plotly")
library(plotly)
df <- as.data.frame(mpg)
head(df)
g <- ggplot(data = df,
aes(x= displ,y= hwy)) + geom_point(size=3,color="blue")
ggplotly(g)
## 디플라이r 이랑 지지 플롯은 만든 사람이 같아서 뭐 되긴한다
# 맵에서 두개 찍어서 연결하기
addr <- c("공덕역","역삼역")
gc <- geocode(enc2utf8(addr))
df <- data.frame(lon=gc$lon,lat=gc$lat)
cen <- c(mean(df$lon),mean(df$lat))
gg <- get_googlemap(center = cen,maptype = "roadmap",zoom=13,markers = df) %>% ggmap() + geom_line(data = df,color = "red")
gg <- get_googlemap(center = cen,maptype = "roadmap",zoom=13,markers = df) %>% ggmap() + geom_line(data = df,color = "red")
get_googlemap(center = geo_data,maptype = "roadmap",zoom = 18) %>% ggmap() + geom_point(data=geo_code,aes(x=lon,y=lat),size = 8 ,color = "red")
gg <- get_googlemap(center = cen,maptype = "roadmap",zoom=13,markers = df) %>% ggmap() + geom_line(data = df,color = "red")
gg <- get_googlemap(center = cen,maptype = "roadmap",zoom=13,markers = df) %>% ggmap() + geom_line(data = df,color = "red",alpha = 0.4)
ggplotly(gg)
get_googlemap(center = geo_data,maptype = "roadmap",zoom = 18) %>% ggmap() + geom_point(data=geo_code,aes(x=lon,y=lat),size = 8 ,color = "red",alpha=0.4)
get_googlemap(center = geo_data,maptype = "roadmap",zoom = 18) %>% ggmap() + geom_point(data=geo_code,aes(x=lon,y=lat),size = 15 ,color = "red",alpha=0.4)
get_googlemap(center = geo_data,maptype = "roadmap",zoom = 18) %>% ggmap() + geom_point(data=geo_code,aes(x=lon,y=lat),size = 5km ,color = "red",alpha=0.4)
help("geom_point")
get_googlemap(center = geo_data,maptype = "roadmap",zoom = 18) %>% ggmap() + geom_point(data=geo_code,aes(x=lon,y=lat),size = 1 ,color = "red",alpha=0.4)
get_googlemap(center = geo_data,maptype = "roadmap",zoom = 18) %>% ggmap() + geom_point(data=geo_code,aes(x=lon,y=lat),size = 10 ,color = "red",alpha=0.4)
get_googlemap(center = geo_data,maptype = "roadmap",zoom = 18) %>% ggmap() + geom_point(data=geo_code,aes(x=lon,y=lat),size = 20 ,color = "red",alpha=0.4)
geo_data
geo_data <- ｃ（１２７．１２８３５，３７．５０２２５）
ggmap(get_googlemap(geo_data,maptype = "roadmap"))
